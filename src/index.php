<?php
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $data = json_decode(file_get_contents('php://input'), true);
    $filename = $data['filename'] ?? '';
    $content = $data['content'] ?? '';

    if ($filename && $content) {
        if (file_put_contents($filename, $content)) {
            echo "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: " . $filename;
        } else {
            http_response_code(500);
            echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª";
        }
    } else {
        http_response_code(400);
        echo "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ";
    }
    exit;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
if (isset($_GET['folder-path'])) {
    $folder = $_GET['folder-path'];
    $files = [];

    if (is_dir($folder)) {
        foreach (scandir($folder) as $item) {
            if ($item === '.' || $item === '..') continue;
            $path = $folder . DIRECTORY_SEPARATOR . $item;
            $files[] = [
                'name' => $item,
                'type' => is_dir($path) ? 'folder' : 'file',
                'path' => $path
            ];
        }
    }

    header('Content-Type: application/json');
    echo json_encode($files);
    exit;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
if (isset($_GET['file'])) {
    $file = $_GET['file'];
    if (file_exists($file) && is_file($file)) {
        echo file_get_contents($file);
    } else {
        http_response_code(404);
        echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω";
    }
    exit;
}
?>

<!DOCTYPE html>
<html lang="en">

<head>
    <title>LIX</title>
    <style type="text/css">
        body {
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        #sidebar {
            width: 250px;
            background: #2f3129;
            color: #f8f8f2;
            overflow-y: auto;
            padding: 10px;
        }
        #sidebar * {
            user-select: none;
        }
        #editor {
            flex: 1;
            /* background: #272822; –¶–≤–µ—Ç —Ñ–æ–Ω–∞ Monokai */
        }
        .file-item {
            padding: 5px;
            cursor: pointer;
        }
        .file-item:hover {
            background: #3e3d32;
        }
        .folder {
            font-weight: bold;
        }
        .folder::before {
            content: "üìÅ ";
        }
        .file::before {
            content: "üìÑ ";
        }
        .folder-contents {
            margin-left: 20px;
            display: none;
        }
        .folder-contents.visible {
            display: block;
        }
    </style>
</head>

<body>
    <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ä–µ–≤–æ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π -->
    <div id="sidebar">
        <h3>Files</h3>
        <div id="file-tree"></div>
    </div>

    <!-- –†–µ–¥–∞–∫—Ç–æ—Ä -->
    <div id="editor"></div>

    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Ace Editor -->
    <script>%ace%</script>
    %vim%
    <script>%mode-html%</script>
    <script>%mode-php%</script>
    <script>%mode-javascript%</script>
    <script>%mode-css%</script>
    <script>%theme-monokai%</script>
    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        pathSeperator = '%path-seperator%';
        var editor = ace.edit("editor");
        
        editor.setTheme("ace/theme/monokai");

        %layout%

        file = '';
        basenameFile = '';

        function renderSaveFile(){
            let title = document.querySelector('title');
            title.innerText = `<>${basenameFile}`;
            setTimeout(() => {
                title.innerText = basenameFile;
            }, 700);
        }

        function saveFile(){
            var filename = file; // –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            var content = editor.getValue();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            fetch("", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ filename: filename, content: content })
            })
            .then(response => response.text())
            .then(message => {
                console.log(message);
                renderSaveFile();
            })
            .catch(error => {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É :w


        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        function loadFileTree(folder, parentElement) {
            fetch(`?folder-path=${encodeURIComponent(folder)}`)
                .then(response => response.json())
                .then(data => {
                    parentElement.innerHTML = '';
                    renderFileTree(data, parentElement);
                })
                .catch(error => {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:", error);
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        function renderFileTree(tree, parentElement) {
            tree.forEach(item => {
                var div = document.createElement("div");
                div.className = item.type === "folder" ? "file-item folder" : "file-item file";
                div.textContent = item.name;

                if (item.type === "folder") {
                    
                    var contents = document.createElement("div");
                    contents.className = "folder-contents";
                    div.appendChild(contents);

                    div.onclick = (e) => {
                        e.stopPropagation();
                        contents.classList.toggle("visible");
                        if (contents.classList.contains("visible")) {
                            loadFileTree(item.path, contents);
                        }
                    };
                } else {
                    div.onclick = (e) => {
                        e.stopPropagation();
                        file = item.path;
                        basenameFile = item.path.split(pathSeperator).reverse()[0];
                        document.querySelector('title').innerText = basenameFile;
                        loadFile(item.path);
                        
                        
                    };
                }
                console.log('rendered')
                parentElement.appendChild(div);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        function loadFile(path) {
            fetch(`?file=${encodeURIComponent(path)}`)
                .then(response => response.text())
                .then(content => {
                    editor.setValue(content);
                    setSyntaxMode(path); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                    // document.getElementById("ace_content").focus();
                    editor.focus()
                })
                .catch(error => {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", error);
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        function setSyntaxMode(path) {
            var mode;
            if (path.endsWith(".html")) {
                mode = "ace/mode/html";
            } else if (path.endsWith(".js")) {
                mode = "ace/mode/javascript";
            } else if (path.endsWith(".php")) {
                mode = "ace/mode/php";
            } else if (path.endsWith(".css")) {
                mode = "ace/mode/css";
            } else {
                mode = "ace/mode/text"; // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            }
            editor.session.setMode(mode);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        var folder = new URLSearchParams(window.location.search).get("folder") || ".";
        var fileTree = document.getElementById("file-tree");
        loadFileTree(folder, fileTree);
    </script>
</body>

</html>